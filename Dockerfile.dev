# Use the same Rust base image
FROM rust:1.70 as development
WORKDIR /usr/src
USER root

# Install development tools (like cargo-watch)
RUN cargo install cargo-watch
RUN cargo install cargo-make

# Install Bun and global packages as before
RUN curl -fsSL https://bun.sh/install | bash && \
  ln -s $HOME/.bun/bin/bun /usr/local/bin/bun
RUN bun install -g tailwindcss

# Copy only what is necessary for dependency resolution
COPY nebula_lib/Cargo.toml nebula_lib/Cargo.lock ./nebula_lib/
COPY nebula_server/Cargo.toml nebula_server/Cargo.lock ./nebula_server/
COPY nebula_server/Makefile.toml nebula_server/Makefile.toml ./nebula_server/

# # Dummy build for nebula_lib
# RUN mkdir -p nebula_lib/src && echo "fn main() {}" > nebula_lib/src/lib.rs && cargo build --manifest-path nebula_lib/Cargo.toml
# # # Dummy build for nebula_server
# RUN mkdir -p nebula_server/src && echo "fn main() {}" > nebula_server/src/main.rs && cargo build --manifest-path nebula_server/Cargo.toml


# Mount the source code as a volume
VOLUME ["/usr/src/nebula_lib/src", "/usr/src/nebula_server/src", "/usr/src/nebula_server/styles", "/usr/src/nebula_server/templates", "/usr/src/nebula_server/assets"]

# Expose the port the application runs on
EXPOSE 8000

#WORKDIR ./nebula_server

# Set the command to run your application using cargo-watch for live reloading
CMD ["sh", "-c", "cd ./nebula_server && cargo make run-dev"]
